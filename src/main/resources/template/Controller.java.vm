package ${package}.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import ${package}.vo.${className}SaveVo;
import ${package}.vo.${className}SearchVo;
import ${package}.vo.${className}UpdateVo;
import com.deepsec.notarization.modules.common.base.controller.BaseController;
import com.deepsec.notarization.modules.common.base.PageBean;
import com.deepsec.notarization.modules.common.base.ResponseData;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(value = "${comments}", tags = "${comments}")
@RestController
@RequestMapping("${pathName}")
public class ${className}Controller extends BaseController{
	@Autowired
	private ${className}Service ${classname}Service;
	
	private Logger logger = LoggerFactory.getLogger(getClass());
		
    /**
     * 列表
     */
    @ApiOperation(value = "获取列表", notes = "获取列表", produces = "application/json")
    @GetMapping(value = "list", produces = { "application/json;charset=UTF-8" })
    public PageBean<${className}Entity> list  (${className}SearchVo searchVo) throws Exception{
        //查询列表数据
        PageBean<${className}Entity> pageBean = new PageBean<${className}Entity>();
        pageBean = ${classname}Service.queryList(searchVo);
        return pageBean;
    }
	
    /**
     * 信息
     */
    @ApiOperation(value = "查看详细信息", notes = "查看详细信息", produces = "application/json")
    @GetMapping(value = "info/{${pk.attrname}}", produces = { "application/json;charset=UTF-8" })
    public ResponseData<${className}Entity> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname})  throws Exception {
        ResponseData<${className}Entity> response = new ResponseData<>();
        ${className}Entity entity = ${classname}Service.queryObject(${pk.attrname});
        response.ok().setData(entity);
        return response;
    }

    /**
     * 保存
     */
    @ApiOperation(value = "保存", notes = "保存", produces = "application/json")
    @PostMapping(value = "save",produces = {"application/json;charset=UTF-8"})
    public ResponseData<String> save(@RequestBody ${className}SaveVo saveVo)  throws Exception {
        ResponseData<String> response = new ResponseData<>();
        ${classname}Service.save(getUser(),saveVo);
        return response.ok("保存成功");
    }

    /**
     * 修改
     */
    @ApiOperation(value = "修改", notes = "修改", produces = "application/json")
    @PostMapping(value = "update", produces = { "application/json;charset=UTF-8" })
    public ResponseData<String> update(@RequestBody ${className}UpdateVo updateVo)  throws Exception {
        ResponseData<String> response = new ResponseData<>();
        ${classname}Service.update(getUser(),updateVo);
        return response.ok("修改成功");
    }

    /**
     * 删除
     */
    @ApiOperation(value = "删除", notes = "删除", produces = "application/json")
    @DeleteMapping(value = "delete", produces = { "application/json;charset=UTF-8" })
    public ResponseData<String> delete(${pk.attrType} ${pk.attrname})  throws Exception {
        ResponseData<String> response = new ResponseData<String>();
        ${classname}Service.delete(${pk.attrname});
        return response.ok("删除成功");
    }

    /**
     * 逻辑删除
     */
    @ApiOperation(value = "逻辑删除", notes = "逻辑删除", produces = "application/json")
    @DeleteMapping(value = "logicDelete", produces = { "application/json;charset=UTF-8" })
    public ResponseData<String> logicDelete(${pk.attrType} ${pk.attrname})  throws Exception {
        ResponseData<String> response = new ResponseData<String>();
        ${classname}Service.logicDelete(getUser(),${pk.attrname});
        return response.ok("逻辑删除成功");
    }
	
}
