package ${package}.service.impl;
import com.deepsec.notarization.modules.common.base.PageBean;
import com.deepsec.notarization.modules.common.base.entity.UserEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.beans.BeanUtils;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import ${package}.dao.${className}Dao;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;
import ${package}.vo.${className}SearchVo;
import ${package}.vo.${className}SaveVo;
import ${package}.vo.${className}UpdateVo;
import org.springframework.transaction.annotation.Transactional;

/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service("${classname}Service")
public class ${className}ServiceImpl implements ${className}Service {

    private Logger logger = LoggerFactory.getLogger(getClass());
    
	@Autowired
	private ${className}Dao ${classname}Dao;
	
	@Override
	public ${className}Entity queryObject(${pk.attrType} ${pk.attrname}){	    
	    ${className}Entity ${classname}Entity= ${classname}Dao.queryObject(${pk.attrname});
        return ${classname}Entity;
	}
	
	@Override
	public PageBean<${className}Entity> queryList(${className}SearchVo searchVo){
	    PageBean<${className}Entity> pageBean=new PageBean<>();
	    
	    PageHelper.startPage(searchVo.getPage(),searchVo.getLimit());
	    
	    PageInfo<${className}Entity> page=new PageInfo<>(${classname}Dao.queryPage(searchVo));
	    
	    pageBean.setCount(new Long(page.getTotal()).intValue());
        //设置每页显示记录数
        pageBean.setLimit(searchVo.getLimit());
        //设置当前页数
        pageBean.setCurrentPage(searchVo.getPage());
        //设置数据
        pageBean.setData(page.getList());
        //设置状态码
        pageBean.setCode(HttpStatus.OK.value());
        //设置返回信息
        pageBean.setMsg("查询成功");
	    
		return pageBean;
	}
	
	@Override
	@Transactional(rollbackFor = Exception.class)
	public void save(UserEntity userEntity, ${className}SaveVo saveVo) throws Exception{
	    
	    ${className}Entity ${classname}Entity = new ${className}Entity();
        BeanUtils.copyProperties(saveVo, ${classname}Entity);
        
	    ${classname}Dao.save(${classname}Entity);
	   
	}
	
	@Override
	@Transactional(rollbackFor = Exception.class)
	public void update(UserEntity userEntity, ${className}UpdateVo updateVo) throws Exception{
	    
        ${className}Entity ${classname}Entity = new ${className}Entity();
        BeanUtils.copyProperties(updateVo, ${classname}Entity);
        
        ${classname}Dao.update(${classname}Entity);
        
	}
	
	@Override
	public void delete(${pk.attrType} ${pk.attrname}){
		${classname}Dao.delete(${pk.attrname});
	}
	
    @Override
    public void logicDelete(UserEntity userEntity,${pk.attrType} ${pk.attrname}){
        
        ${className}Entity ${classname}Entity = new ${className}Entity();
        
        ${classname}Entity.set${pk.attrName}(${pk.attrname});
        //${classname}Entity.setModifier(userEntity.getId());
        //${classname}Entity.setIsDelete(1);
        ${classname}Dao.update(${classname}Entity);
        
    }
	
}
